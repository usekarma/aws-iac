#!/usr/bin/env bash
set -euxo pipefail
exec > >(tee -a /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1

# ---------------- Inputs from Terraform ----------------
EBS_DEV="${EBS_DEVICE}"                     # "" => auto-pick largest non-root NVMe
MNT="${MOUNT_POINT}"                        # e.g., "/var/lib/clickhouse"
MARKER_FILE="${MARKER_FILE}"                # e.g., "/var/local/BOOTSTRAP_OK"
CH_HTTP="${CH_HTTP_PORT}"                   # e.g., 8123
CH_TCP="${CH_TCP_PORT}"                     # e.g., 9000
BACKUP_BUCKET="${BACKUP_BUCKET}"            # e.g., "usekarma.dev-prod"
BACKUP_PREFIX="${BACKUP_PREFIX}"            # e.g., "clickhouse"

# ---------------- Wait for basic network ----------------
for i in {1..30}; do curl -fsS https://aws.amazon.com >/dev/null && break || sleep 2; done

# ---------------- Detect package manager / distro -------
PM=""
if command -v dnf >/dev/null 2>&1; then
  PM="dnf" ; DISTRO="al2023"
elif command -v yum >/dev/null 2>&1; then
  PM="yum" ; DISTRO="al2"
elif command -v apt-get >/dev/null 2>&1; then
  PM="apt" ; DISTRO="ubuntu"
else
  echo "ERROR: No supported package manager found (dnf/yum/apt)" >&2
  exit 1
fi

# ---------------- Install & start SSM (unchanged) -------
if [[ "$PM" == "apt" ]]; then
  export DEBIAN_FRONTEND=noninteractive
  apt-get update -y
  apt-get install -y amazon-ssm-agent || true
else
  $PM -y update || true
  $PM -y install amazon-ssm-agent || true
fi
systemctl enable --now amazon-ssm-agent
systemctl is-active --quiet amazon-ssm-agent

# ---------------- Core tools (avoid AL2023 conflicts) ---
if [[ "$PM" == "apt" ]]; then
  apt-get install -y ca-certificates jq rsync xfsprogs xz-utils curl awscli
else
  $PM -y install ca-certificates jq rsync xfsprogs dnf-plugins-core awscli --skip-broken || true
fi

# ---------------- Optional: pick & mount data disk ------
if [[ -n "$MNT" ]]; then
  mkdir -p "$MNT"

  pick_data_dev() {
    if [[ -n "$EBS_DEV" && -b "$EBS_DEV" ]]; then echo "$EBS_DEV"; return 0; fi
    local rootpk
    rootpk="$(lsblk -no pkname "$(findmnt -no SOURCE /)" 2>/dev/null | head -n1)"
    lsblk -dn -o NAME,TYPE,SIZE \
      | awk '$2=="disk"{print $1" "$3}' \
      | sort -k2 -hr | awk '{print $1}' \
      | while read -r n; do
          [[ "$n" == "$rootpk" ]] && continue
          [[ -b "/dev/$n" ]] && { echo "/dev/$n"; break; }
        done
  }

  DATA_DEV=""
  for _ in {1..60}; do
    DATA_DEV="$(pick_data_dev || true)"
    [[ -n "$DATA_DEV" && -b "$DATA_DEV" ]] && break
    sleep 2
  done

  if [[ -n "$DATA_DEV" ]]; then
    if ! blkid "$DATA_DEV" >/dev/null 2>&1; then
      if [[ "$PM" == "apt" ]]; then apt-get install -y xfsprogs; else $PM -y install xfsprogs || true; fi
      mkfs.xfs -f "$DATA_DEV"
    fi
    UUID="$(blkid -s UUID -o value "$DATA_DEV")"
    # Remove stale lines for this mountpoint or legacy /dev/xvdb
    sed -i "\|[[:space:]]$MNT[[:space:]]|d;/^\/dev\/xvdb[[:space:]]/d" /etc/fstab
    grep -q "$UUID" /etc/fstab || echo "UUID=$UUID  $MNT  xfs  defaults,nofail  0  2" >> /etc/fstab
    mount -a
    mountpoint -q "$MNT"
  else
    echo "WARN: No data disk found; ClickHouse will use default /var/lib/clickhouse" >&2
  fi
fi

# ---------------- Install ClickHouse (fixed repo) -------
if [[ "$PM" == "apt" ]]; then
  install -m 0755 -d /usr/share/keyrings
  curl -fsSL https://packages.clickhouse.com/apt/doc/apt-key.gpg \
    | gpg --dearmor -o /usr/share/keyrings/clickhouse.gpg
  echo "deb [signed-by=/usr/share/keyrings/clickhouse.gpg] https://packages.clickhouse.com/deb stable main" \
    > /etc/apt/sources.list.d/clickhouse.list
  apt-get update -y
  apt-get install -y clickhouse-server clickhouse-client
else
  # Official repo file contains correct baseurl & gpgkey
  dnf config-manager --add-repo https://packages.clickhouse.com/rpm/clickhouse.repo || true
  $PM -y makecache || true
  $PM -y install clickhouse-server clickhouse-client
fi

# ---------------- Configure data path & ports ----------
systemctl stop clickhouse-server || true

TARGET_PATH="/var/lib/clickhouse"
if [[ -n "$MNT" && -n "$(mount | awk '{print $3}' | grep -Fx "$MNT" || true)" ]]; then
  TARGET_PATH="$MNT"
fi

mkdir -p "$TARGET_PATH" /var/lib/clickhouse
chown -R clickhouse:clickhouse "$TARGET_PATH"
rsync -a /var/lib/clickhouse/ "$TARGET_PATH"/ || true
chown -R clickhouse:clickhouse "$TARGET_PATH"

mkdir -p /etc/clickhouse-server/config.d
# Use unquoted heredocs so bash expands; $${...} prevents Terraform from eating it
cat >/etc/clickhouse-server/config.d/10-data-path.xml <<EOF
<yandex>
  <path>$${TARGET_PATH}/</path>
</yandex>
EOF

cat >/etc/clickhouse-server/config.d/20-network.xml <<EOF
<yandex>
  <listen_host>0.0.0.0</listen_host>
  <http_port>$${CH_HTTP}</http_port>
  <tcp_port>$${CH_TCP}</tcp_port>
</yandex>
EOF

# ---------------- Enable/start ClickHouse --------------
# Avoid SysV confusion on AL2023
mv /etc/init.d/clickhouse-server /etc/init.d/clickhouse-server.rpmorig 2>/dev/null || true
mv /etc/rc.d/init.d/clickhouse-server /etc/rc.d/init.d/clickhouse-server.rpmorig 2>/dev/null || true

# If vendor unit lacks [Install], add one
if ! systemctl cat clickhouse-server | grep -q '^\[Install\]'; then
  cp -f /usr/lib/systemd/system/clickhouse-server.service /etc/systemd/system/clickhouse-server.service
  cat >>/etc/systemd/system/clickhouse-server.service <<'EOF'

[Install]
WantedBy=multi-user.target
EOF
fi

systemctl daemon-reload
if ! systemctl enable --now clickhouse-server; then
  mkdir -p /etc/systemd/system/multi-user.target.wants
  ln -sf /usr/lib/systemd/system/clickhouse-server.service \
         /etc/systemd/system/multi-user.target.wants/clickhouse-server.service
  systemctl start clickhouse-server
fi
systemctl is-active --quiet clickhouse-server || (journalctl -u clickhouse-server -n 200 --no-pager || true)

# ---------------- Backup script + timer -----------------
# Script uses the resolved TARGET_PATH and uploads to s3://$BACKUP_BUCKET/$BACKUP_PREFIX/
install -m 0755 -d /usr/local/bin
cat >/usr/local/bin/clickhouse-backup.sh <<EOF
#!/usr/bin/env bash
set -euo pipefail

BACKUP_BUCKET="${BACKUP_BUCKET}"
BACKUP_PREFIX="${BACKUP_PREFIX}"
SRC_PATH="$${TARGET_PATH}"
TS="\$(date -u +%Y%m%dT%H%M%SZ)"
ARCH="/tmp/clickhouse-\$${TS}.tar.zst"

# Minimal quiesce: sync pages; for stronger guarantees use EBS snapshots or CH backup
sync
tar -I 'zstd -19' -cf "\$ARCH" -C "\$SRC_PATH" .
aws s3 cp "\$ARCH" "s3://\${BACKUP_BUCKET}/\${BACKUP_PREFIX}/"
rm -f "\$ARCH"
echo "Uploaded s3://\${BACKUP_BUCKET}/\${BACKUP_PREFIX}/\$(basename "\$ARCH")"
EOF
chmod +x /usr/local/bin/clickhouse-backup.sh

cat >/etc/systemd/system/clickhouse-backup.service <<'EOF'
[Unit]
Description=ClickHouse Backup to S3
After=network-online.target clickhouse-server.service
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/clickhouse-backup.sh
Nice=10
IOSchedulingClass=best-effort
IOSchedulingPriority=7
EOF

cat >/etc/systemd/system/clickhouse-backup.timer <<'EOF'
[Unit]
Description=Run ClickHouse Backup Daily

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
EOF

systemctl daemon-reload
systemctl enable --now clickhouse-backup.timer
systemctl list-timers --all | grep clickhouse-backup || true

# ---------------- Marker -------------------------------
echo "$(date -u +%FT%TZ) BOOTSTRAP_OK" > "$MARKER_FILE"
