#!/usr/bin/env bash
set -euxo pipefail

EBS_DEV="${EBS_DEVICE}"
MNT="${MOUNT_POINT}"
CH_HTTP="${CH_HTTP_PORT}"
CH_TCP="${CH_TCP_PORT}"
S3_BUCKET="${BACKUP_BUCKET}"
S3_PREFIX="${BACKUP_PREFIX}"
CH_TRACK="${CH_VERSION_TRACK}"

# Wait for EBS to show up
for i in {1..30}; do
  if lsblk | grep -q "$(basename "$EBS_DEV")"; then break; fi
  sleep 2
done

# Filesystem + mount
if ! blkid "$EBS_DEV" >/dev/null 2>&1; then
  mkfs.xfs -f "$EBS_DEV"
fi
mkdir -p "$MNT"
grep -q "$EBS_DEV" /etc/fstab || echo "$EBS_DEV $MNT xfs defaults,nofail 0 2" >> /etc/fstab
mount -a

# Base packages
dnf update -y
dnf install -y curl gnupg2 ca-certificates jq amazon-ssm-agent

# ClickHouse repo (official)
rpm --import https://packages.clickhouse.com/rpm/stable/ClickHouse.asc
cat >/etc/yum.repos.d/clickhouse.repo <<EOF
[clickhouse]
name=ClickHouse
baseurl=https://packages.clickhouse.com/rpm/stable
enabled=1
gpgcheck=1
gpgkey=https://packages.clickhouse.com/rpm/stable/ClickHouse.asc
EOF

# Install server + client
dnf install -y clickhouse-server clickhouse-client

# Ensure data dir is on EBS
systemctl stop clickhouse-server || true
mkdir -p "$MNT" /var/lib/clickhouse
chown -R clickhouse:clickhouse "$MNT"
rsync -a /var/lib/clickhouse/ "$MNT"/ || true
sed -i 's#<path>.*</path>#<path>'"$MNT"'/</path>#' /etc/clickhouse-server/config.xml

# Ports
xmlstarlet ed -L \
  -u "/yandex/listen_host" -v "0.0.0.0" \
  /etc/clickhouse-server/config.xml || true

# HTTP/TCP ports (if you want custom)
# leaving defaults (8123, 9000) unless CH_HTTP/CH_TCP differ
if [ "$CH_HTTP" != "8123" ]; then
  xmlstarlet ed -L -u "/yandex/http_port" -v "$CH_HTTP" /etc/clickhouse-server/config.xml || true
fi
if [ "$CH_TCP" != "9000" ]; then
  xmlstarlet ed -L -u "/yandex/tcp_port" -v "$CH_TCP" /etc/clickhouse-server/config.xml || true
fi

# Simple backup helper (uses aws cli, installed via dnf)
dnf install -y awscli

cat >/usr/local/bin/ch-backup-s3 <<'EOS'
#!/usr/bin/env bash
set -euo pipefail
BUCKET="$1"; PREFIX="$2"
TS="$(date -u +%Y%m%d-%H%M%S)"
ARCHIVE="/tmp/ch-backup-$TS.tar.zst"

# Make a lightweight backup (filesystem snapshot would be better; use LVM/EBS snapshots in prod)
tar -I 'zstd -19' -cf "$ARCHIVE" /var/lib/clickhouse
aws s3 cp "$ARCHIVE" "s3://$BUCKET/$PREFIX/$TS.tar.zst"
rm -f "$ARCHIVE"
echo "Uploaded s3://$BUCKET/$PREFIX/$TS.tar.zst"
EOS
chmod +x /usr/local/bin/ch-backup-s3

# --- MSK topic initializer (optional) ---
if [ "${MSK_BOOTSTRAP:-}" != "" ]; then
  dnf install -y java-17-amazon-corretto-headless
  KAFKA_VER="3.7.0"
  curl -L -o /tmp/kafka.tgz "https://archive.apache.org/dist/kafka/${KAFKA_VER}/kafka_2.13-${KAFKA_VER}.tgz"
  tar -xzf /tmp/kafka.tgz -C /opt
  ln -sf "/opt/kafka_2.13-${KAFKA_VER}" /opt/kafka

  # AWS MSK IAM auth JAR
  mkdir -p /opt/kafka/libs
  curl -L -o /opt/kafka/libs/aws-msk-iam-auth-1.1.8-all.jar \
    "https://repo1.maven.org/maven2/software/amazon/msk/aws-msk-iam-auth/1.1.8/aws-msk-iam-auth-1.1.8-all.jar"

  cat >/etc/kafka-client.properties <<'EOF'
security.protocol=SASL_SSL
sasl.mechanism=AWS_MSK_IAM
sasl.jaas.config=software.amazon.msk.auth.iam.IAMLoginModule required;
sasl.client.callback.handler.class=software.amazon.msk.auth.iam.IAMClientCallbackHandler
EOF

  cat >/usr/local/bin/msk-create-topic <<'EOS'
#!/usr/bin/env bash
set -euo pipefail
BOOT="$1"
TOPIC="$2"
PARTS="$3"
RETMS="$4"
CONF="/etc/kafka-client.properties"
BIN="/opt/kafka/bin/kafka-topics.sh"

"$BIN" --bootstrap-server "$BOOT" \
  --command-config "$CONF" \
  --create --topic "$TOPIC" \
  --partitions "$PARTS" \
  --config "retention.ms=$RETMS" \
  --if-not-exists
EOS
  chmod +x /usr/local/bin/msk-create-topic

  # systemd oneshot to create the topic (retries a few times)
  cat >/etc/systemd/system/msk-topic-init.service <<'UNIT'
[Unit]
Description=MSK Topic Initializer
After=network-online.target clickhouse-server.service
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash -lc 'for i in {1..10}; do /usr/local/bin/msk-create-topic "${MSK_BOOTSTRAP}" "${MSK_TOPIC}" ${MSK_PARTS} ${MSK_RETMS} && exit 0; sleep 10; done; exit 1'
Environment=MSK_BOOTSTRAP=
Environment=MSK_TOPIC=
Environment=MSK_PARTS=
Environment=MSK_RETMS=

[Install]
WantedBy=multi-user.target
UNIT

  # Fill env for the unit
  sed -i "s|^Environment=MSK_BOOTSTRAP=.*|Environment=MSK_BOOTSTRAP=${MSK_BOOTSTRAP}|" /etc/systemd/system/msk-topic-init.service
  sed -i "s|^Environment=MSK_TOPIC=.*|Environment=MSK_TOPIC=${MSK_TOPIC}|" /etc/systemd/system/msk-topic-init.service
  sed -i "s|^Environment=MSK_PARTS=.*|Environment=MSK_PARTS=${MSK_PARTS}|" /etc/systemd/system/msk-topic-init.service
  sed -i "s|^Environment=MSK_RETMS=.*|Environment=MSK_RETMS=${MSK_RETMS}|" /etc/systemd/system/msk-topic-init.service

  systemctl daemon-reload
  systemctl enable --now msk-topic-init.service
fi

systemctl enable --now clickhouse-server
