#!/usr/bin/env bash
set -euxo pipefail
exec > >(tee -a /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
echo "[userdata-mongo] start $(date -Is)"

# ---------------- Inputs from Terraform ----------------
EBS_DEV="${EBS_DEVICE}"                      # "" => auto-pick largest non-root NVMe
MNT="${MOUNT_POINT}"                         # e.g., "/var/lib/mongo"
MARKER_FILE="${MARKER_FILE}"                 # e.g., "/var/local/BOOTSTRAP_OK"
BACKUP_BUCKET="${BACKUP_BUCKET}"             # e.g., "usekarma.dev-prod"
BACKUP_PREFIX="${BACKUP_PREFIX}"             # e.g., "mongo"
AWS_REGION="${AWS_REGION}"                   # e.g., "us-east-1"

# Allow override; defaults sane
MONGO_MAJOR="${MONGO_MAJOR:-7.0}"
MONGO_PORT="${MONGO_PORT:-27017}"
RS_NAME="${RS_NAME:-rs0}"

# ---------------- Wait for basic network ----------------
for i in {1..30}; do curl -fsS https://aws.amazon.com >/dev/null && break || sleep 2; done

# ---------------- Detect package manager / distro -------
PM=""
DISTRO=""
if command -v dnf >/dev/null 2>&1; then
  PM="dnf" ; DISTRO="al2023"
elif command -v yum >/dev/null 2>&1; then
  PM="yum" ; DISTRO="al2"
elif command -v apt-get >/dev/null 2>&1; then
  PM="apt" ; DISTRO="ubuntu"
else
  echo "ERROR: No supported package manager found (dnf/yum/apt)" >&2
  exit 1
fi

# ---------------- Install & start SSM -------------------
if [[ "$PM" == "apt" ]]; then
  export DEBIAN_FRONTEND=noninteractive
  apt-get update -y || true
  apt-get install -y amazon-ssm-agent || true
else
  $PM -y update || true
  $PM -y install amazon-ssm-agent || true
fi
systemctl enable --now amazon-ssm-agent
systemctl is-active --quiet amazon-ssm-agent

# ---------------- Core tools ----------------------------
if [[ "$PM" == "apt" ]]; then
  apt-get install -y ca-certificates gnupg jq rsync xfsprogs xz-utils curl awscli zstd
else
  $PM -y install ca-certificates jq rsync xfsprogs dnf-plugins-core awscli zstd --skip-broken || true
fi

# ---------------- Optional: pick & mount data disk -------
if [[ -n "$MNT" ]]; then
  mkdir -p "$MNT"

  pick_data_dev() {
    if [[ -n "$EBS_DEV" && -b "$EBS_DEV" ]]; then echo "$EBS_DEV"; return 0; fi
    local rootpk
    rootpk="$(lsblk -no pkname "$(findmnt -no SOURCE /)" 2>/dev/null | head -n1)"
    lsblk -dn -o NAME,TYPE,SIZE \
    | awk '$2=="disk"{print $1" "$3}' \
    | sort -k2 -hr | awk '{print $1}' \
      | while read -r n; do
          [[ "$n" == "$rootpk" ]] && continue
          [[ -b "/dev/$n" ]] && { echo "/dev/$n"; break; }
        done
  }

  DATA_DEV=""
  for _ in {1..60}; do
    DATA_DEV="$(pick_data_dev || true)"
    [[ -n "$DATA_DEV" && -b "$DATA_DEV" ]] && break
    sleep 2
  done

  if [[ -n "$DATA_DEV" ]]; then
    if ! blkid "$DATA_DEV" >/dev/null 2>&1; then
      if [[ "$PM" == "apt" ]]; then apt-get install -y xfsprogs; else $PM -y install xfsprogs || true; fi
      mkfs.xfs -f "$DATA_DEV"
    fi
    UUID="$(blkid -s UUID -o value "$DATA_DEV")"
    sed -i "\|[[:space:]]$MNT[[:space:]]|d;/^\/dev\/xvdb[[:space:]]/d" /etc/fstab
    grep -q "$UUID" /etc/fstab || echo "UUID=$UUID  $MNT  xfs  defaults,nofail  0  2" >> /etc/fstab
    mount -a
    mountpoint -q "$MNT"
  else
    echo "WARN: No data disk found; MongoDB will use default /var/lib/mongo" >&2
  fi
fi

# ---------------- Install MongoDB -----------------------
if [[ "$DISTRO" == "al2023" ]]; then
  cat >/etc/yum.repos.d/mongodb-org-${MONGO_MAJOR}.repo <<EOF
[mongodb-org-${MONGO_MAJOR}]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/9/mongodb-org/${MONGO_MAJOR}/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/server-${MONGO_MAJOR}.asc
EOF
  dnf clean all || true
  dnf install -y mongodb-org
elif [[ "$DISTRO" == "al2" ]]; then
  cat >/etc/yum.repos.d/mongodb-org-${MONGO_MAJOR}.repo <<EOF
[mongodb-org-${MONGO_MAJOR}]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/7/mongodb-org/${MONGO_MAJOR}/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/server-${MONGO_MAJOR}.asc
EOF
  yum clean all || true
  yum install -y mongodb-org
elif [[ "$DISTRO" == "ubuntu" ]]; then
  . /etc/os-release
  CODENAME="${VERSION_CODENAME:-$(lsb_release -sc 2>/dev/null || echo jammy)}"
  install -d -m 0755 /etc/apt/keyrings
  curl -fsSL https://pgp.mongodb.com/server-${MONGO_MAJOR}.asc \
    | gpg --dearmor -o /etc/apt/keyrings/mongodb-org-${MONGO_MAJOR}.gpg
  echo "deb [arch=amd64,arm64 signed-by=/etc/apt/keyrings/mongodb-org-${MONGO_MAJOR}.gpg] https://repo.mongodb.org/apt/ubuntu ${CODENAME}/mongodb-org/${MONGO_MAJOR} multiverse" \
    >/etc/apt/sources.list.d/mongodb-org-${MONGO_MAJOR}.list
  apt-get update -y
  apt-get install -y mongodb-org
fi

# ---------------- Configure mongod ----------------------
# Ensure data dir exists; move/symlink if MNT differs
mkdir -p /var/lib/mongo
if [[ -n "$MNT" && "$MNT" != "/var/lib/mongo" && -d "$MNT" ]]; then
  rsync -aHAX --delete /var/lib/mongo/ "$MNT"/ || true
  rm -rf /var/lib/mongo
  ln -s "$MNT" /var/lib/mongo
fi

# Choose correct service user/group (mongod on RHEL, mongodb on Debian)
MONGO_USER="$(id -u mongod >/dev/null 2>&1 && echo mongod || echo mongodb)"
MONGO_GROUP="$MONGO_USER"
chown -R "$MONGO_USER":"$MONGO_GROUP" /var/lib/mongo

# Write a clean config (bind 0.0.0.0, custom port, single-node RS)
install -d -m 0755 /etc/mongod.conf.d || true
cat >/etc/mongod.conf <<EOF
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log
storage:
  dbPath: /var/lib/mongo
  journal:
    enabled: true
net:
  port: ${MONGO_PORT}
  bindIp: 0.0.0.0
processManagement:
  timeZoneInfo: /usr/share/zoneinfo
replication:
  replSetName: ${RS_NAME}
EOF

systemctl enable --now mongod

# Wait for socket
for i in {1..60}; do
  ss -ltn "sport = :${MONGO_PORT}" | grep -q LISTEN && break || sleep 1
done

# Install mongosh client if not present (usually included with mongodb-org)
if ! command -v mongosh >/dev/null 2>&1; then
  if [[ "$PM" == "apt" ]]; then
    apt-get install -y mongodb-mongosh
  else
    $PM -y install mongodb-mongosh || true
  fi
fi

# Initiate single-node replica set using the instance's private IP
PRIV_IP="$(hostname -I | awk '{print $1}')"
mongosh --quiet "mongodb://127.0.0.1:${MONGO_PORT}" --eval \
  "try{rs.status()}catch(e){rs.initiate({_id:'${RS_NAME}', members:[{_id:0, host:'${PRIV_IP}:${MONGO_PORT}'}]})}" || true

# Health checks
mongosh --quiet "mongodb://127.0.0.1:${MONGO_PORT}" --eval "db.adminCommand({ping:1})" || true
systemctl status mongod --no-pager || true

# ---------------- Optional: S3 backups (mongodump) ------
if [[ -n "${AWS_REGION}" && -n "${BACKUP_BUCKET}" && -n "${BACKUP_PREFIX}" ]]; then
  install -m 0755 -d /usr/local/bin
  cat >/usr/local/bin/mongo-backup-s3.sh <<'BKS'
#!/usr/bin/env bash
set -euo pipefail
TS="$(date -u +%Y%m%dT%H%M%SZ)"
OUT="/tmp/mongo-dump-$TS"
mongodump --uri="mongodb://127.0.0.1:27017" --gzip --out "$OUT"
aws s3 cp "$OUT" "s3://${BACKUP_BUCKET}/${BACKUP_PREFIX}/dump-$TS/" --recursive --region "${AWS_REGION}"
rm -rf "$OUT"
echo "Uploaded Mongo dump to s3://${BACKUP_BUCKET}/${BACKUP_PREFIX}/dump-$TS/"
BKS
  chmod +x /usr/local/bin/mongo-backup-s3.sh

  cat >/etc/systemd/system/mongo-backup.service <<'SVC'
[Unit]
Description=MongoDB dump to S3
After=network-online.target mongod.service
Wants=network-online.target
[Service]
Type=oneshot
Environment=AWS_REGION=''"${AWS_REGION}"''
Environment=BACKUP_BUCKET=''"${BACKUP_BUCKET}"''
Environment=BACKUP_PREFIX=''"${BACKUP_PREFIX}"''
ExecStart=/usr/local/bin/mongo-backup-s3.sh
Nice=10
IOSchedulingClass=best-effort
IOSchedulingPriority=7
SVC

  cat >/etc/systemd/system/mongo-backup.timer <<'TMR'
[Unit]
Description=Run MongoDB S3 backup daily
[Timer]
OnCalendar=daily
RandomizedDelaySec=15m
Persistent=true
[Install]
WantedBy=timers.target
TMR

  systemctl daemon-reload
  systemctl enable --now mongo-backup.timer
  systemctl list-timers --all | grep mongo-backup || true
else
  echo "[userdata-mongo] Skipping S3 backups (need AWS_REGION/BACKUP_BUCKET/BACKUP_PREFIX)"
fi

# ---------------- Marker -------------------------------
echo "$(date -u +%FT%TZ) BOOTSTRAP_OK" > "$MARKER_FILE"
echo "[userdata-mongo] done $(date -Is)"
